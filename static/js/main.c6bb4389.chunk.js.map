{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/styled.js","Header/index.js","Container/styled.js","Container/index.js","useTasks.js","useLocalStorageState.js","Theme.js","App.js","reportWebVitals.js","index.js"],"names":["FormContent","styled","form","theme","breakpoints","small","FormInput","input","colors","primaryColor","FormButton","button","buttonsColor","buttonsColorHover","buttonsColorActive","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","contentTrimmed","trim","ref","value","required","placeholder","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","done","Button","toggleDone","doneIconsColor","doneIconsColorHover","doneIconsColorActive","remove","deleteIconsColor","deleteIconsColorHover","deleteIconsColorActive","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","id","content","OptionalButtons","div","xsmall","disabled","Buttons","toggleHideDone","setAllDone","deleteAllTasks","length","every","SectionContent","section","SectionHeader","header","SectionBody","SectionTitle","h2","Section","title","body","extraHeaderContent","Title","h1","Header","Main","main","Container","children","useTasks","keyName","initialValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","useLocalStorageState","setTasks","filter","medium","large","App","setHideDone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6bb4389.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const FormContent = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 10px;\n    margin: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const FormInput = styled.input`\n    padding: 10px;\n    border: 1px solid ${({ theme }) => theme.colors.primaryColor};\n    color: ${({ theme }) => theme.colors.primaryColor};\n    outline-color: ${({ theme }) => theme.colors.primaryColor};\n    outline-width: thin;\n`;\n\nexport const FormButton = styled.button`\n    background: ${({ theme }) => theme.colors.buttonsColor};\n    color: white;\n    padding: 10px;\n    border: none;\n\n    &:hover {\n        background: ${({ theme }) => theme.colors.buttonsColorHover};\n        transform: scale(1.05);\n        transition: 0.5s;\n    }\n\n    &:active {\n        background: ${({ theme }) => theme.colors.buttonsColorActive};\n        transform: scale(1.01);\n        transition: 0.5s;\n    }\n`;","import { useState, useRef } from \"react\";\nimport { FormContent, FormInput, FormButton } from \"./styled\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const contentTrimmed = newTaskContent.trim();\n        if (!contentTrimmed) {\n            return;\n        }\n        addNewTask(contentTrimmed);\n        setNewTaskContent(\"\");\n    }\n    return (\n        <FormContent\n            onSubmit={onFormSubmit}\n        >\n            <FormInput\n                ref={inputRef}\n                value={newTaskContent}\n                required\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <FormButton\n                onClick={() => inputRef.current.focus()}\n            >\n                Dodaj zadanie\n            </FormButton>\n        </FormContent>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0 0 20px;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n    margin: 0 20px;\n    padding: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.primaryColor};\n\n    ${({ hidden }) => hidden && css`\n      display: none;\n    `}\n`;\n\n\nexport const Content = styled.span`\n    word-break: break-all;\n\n    ${({ done }) => done && css`\n      text-decoration-line: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    width: 30px;\n    height: 30px;\n    color: white;\n    border: none;\n    font-family: \"Material Icons Outlined\";\n    font-size: 16px;\n    padding: 0;\n\n      ${({ toggleDone }) => toggleDone && css`\n          background-color: ${({ theme }) => theme.colors.doneIconsColor};\n      `}\n\n        &:hover  {\n          background-color: ${({ theme }) => theme.colors.doneIconsColorHover};\n          transition: 1s;\n        }\n\n        &:active {\n          background-color: ${({ theme }) => theme.colors.doneIconsColorActive};\n          transition: 1s;\n        }\n\n      ${({ remove }) => remove && css`\n        background-color: ${({ theme }) => theme.colors.deleteIconsColor};\n\n        &:hover {\n          background-color: ${({ theme }) => theme.colors.deleteIconsColorHover};\n        }\n\n        &:active {\n          background-color: ${({ theme }) => theme.colors.deleteIconsColorActive};\n          transition: 1s;\n        }\n      `}\n`;","import { List, Item, Content, Button } from \"./styled\"\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n    <List>\n        {tasks.map(task => (\n            <Item\n                key={task.id}\n                hidden={task.done && hideDone}\n            >\n                <Button\n                    toggleDone\n                    onClick={() => toggleTaskDone(task.id)}\n                >\n                    {task.done ? \"done\" : \"\"}\n                </Button>\n                <Content\n                    done={task.done}>\n                    {task.content}\n                </Content>\n                <Button\n                    remove\n                    onClick={() => removeTask(task.id)}\n                >\n                    delete\n                </Button>\n            </Item>\n        ))}\n    </List>\n);\n\nexport default Tasks;","import styled, { css } from \"styled-components\"\n\nexport const OptionalButtons = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-right: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        justify-content: center;\n        margin-right: 0px;\n    }\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.xsmall}px) {\n        flex-direction: column;\n        margin-right: 0px;\n    }\n`;\n\nexport const Button = styled.button`\n    color: ${({ theme }) => theme.colors.buttonsColor};\n    border: none;\n    transition: color 0.5s;\n    background-color: transparent;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        margin: 5px;\n    }\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.buttonsColorHover};\n    }\n\n    ${({ disabled }) => disabled && css`\n        color: ${({ theme }) => theme.colors.primaryColor};\n    `}\n`;","import {OptionalButtons, Button} from \"./styled\"\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone, deleteAllTasks }) => (\n\n    <OptionalButtons > {\n        tasks.length > 0 && (\n            <>\n                <Button\n                    onClick={toggleHideDone}\n                    disabled={tasks.every(({ done }) => !done)} >\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n                </Button>\n\n                <Button\n                    onClick={setAllDone}\n                    disabled={tasks.every(({ done }) => done)} >\n                    {hideDone ? \"\" : \"Zaznacz wszystkie\"}\n                </Button>\n\n                <Button\n                    onClick={deleteAllTasks}\n                >\n                    Usuń wszystkie\n                </Button>\n            </>\n        )}\n    </OptionalButtons>\n\n);\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const SectionContent = styled.section`\n    display: grid;\n    margin: 10px;\n     box-shadow: 0 0 5px hsl(0, 0%, 86%);\n    background-color: white;\n`;\n\nexport const SectionHeader = styled.header`\n    display: grid;\n    grid-template-columns: auto auto;\n    border-bottom: 3px solid rgb(241 240 242);\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const SectionBody = styled.div`\n    background-color: white;\n`;\n\nexport const SectionTitle = styled.h2`\n    margin-left: 20px;\n\n    @media (max-width: 768px) {\n        text-align: center;\n        margin-left: 0;\n    }\n`;","import { SectionContent, SectionHeader, SectionBody, SectionTitle } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <SectionContent>\n        <SectionHeader>\n            <SectionTitle>{title}</SectionTitle>\n            {extraHeaderContent}\n        </SectionHeader>\n\n        <SectionBody>\n            {body}\n        </SectionBody>\n    </SectionContent>\n);\n\nexport default Section;","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n    margin: 10px;\n    padding-top: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        text-align: center;\n    }\n`;","import { Title } from \"./styled.js\";\n\nconst Header = ({ title }) => (\n    <Title>{title}</Title>\n);\n\nexport default Header;","import styled from  \"styled-components\";\n\nexport const Main = styled.main`\n  max-width: 900px;\n  margin: 0 auto;\n`;\n\n","import { Main } from \"./styled.js\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","import { useLocalStorageState } from \"./useLocalStorageState\";\n\nexport const useTasks = () => {\n    const [tasks, setTasks] = useLocalStorageState(\"tasks\", []);\n\n    const removeTask = (id) => {\n        setTasks(tasks => tasks.filter(task => task.id !== id));\n    };\n\n    const toggleTaskDone = (id) => {\n        setTasks(tasks => tasks.map(task => {\n            if (task.id === id) {\n                return {\n                    ...task,\n                    done: !task.done\n                };\n            }\n\n            return task;\n        }));\n    };\n\n    const setAllDone = () => {\n        setTasks(tasks => tasks.map(task => ({\n            ...task,\n            done: true,\n        })));\n    };\n\n    const addNewTask = (content) => {\n        setTasks(tasks => [\n            ...tasks,\n            {\n                content,\n                done: false,\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n            },\n        ]);\n    };\n\n    const deleteAllTasks = () => {\n        setTasks([]);\n    };\n\n    return {\n        tasks,\n        removeTask,\n        toggleTaskDone,\n        setAllDone,\n        addNewTask,\n        deleteAllTasks\n    };\n};","import { useState, useEffect } from \"react\";\n\nexport const useLocalStorageState = (keyName, initialValue) => {\n    const getInitialState = () => {\n        const localStorageTasks = localStorage.getItem(keyName);\n        if (localStorageTasks === null) {\n            return initialValue;\n        }\n\n        return JSON.parse(localStorage.getItem(keyName))\n    }\n\n    const [state, setState] = useState(getInitialState);\n\n    useEffect(() => {\n        localStorage.setItem(keyName, JSON.stringify(state));\n    }, [state, keyName]);\n\n    return [state, setState];\n};","export const theme = {\n    colors: {\n        primaryColor: \"hsl(0, 0%, 80%)\",\n        buttonsColor: \"teal\",\n        buttonsColorHover: \"hsl(180, 100%, 35%)\",\n        buttonsColorActive: \"hsl(180, 100%, 45%)\",\n        doneIconsColor: \"green\",\n        doneIconsColorHover: \"hsl(120, 100%, 35%)\",\n        doneIconsColorActive: \"hsl(120, 100%, 45%)\",\n        deleteIconsColor: \"crimson\",\n        deleteIconsColorHover: \"hsl(348, 83%, 57%)\",\n        deleteIconsColorActive: \"hsl(348, 83%, 67%)\",\n    },\n    breakpoints: {\n        xsmall: 576,\n        small: 768,\n        medium: 992,\n        large: 1200,\n    }\n};\n\n","import { useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useTasks } from \"./useTasks\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./Theme\"\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n    deleteAllTasks,\n  } = useTasks();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container>\n        <Header title=\"Lista zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form addNewTask={addNewTask} />}\n        />\n        <Section\n          title=\"Lista zadań\"\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n              deleteAllTasks={deleteAllTasks}\n            />\n          }\n        />\n      </Container>\n    </ThemeProvider>\n\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}