{"version":3,"sources":["Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","className","onSubmit","event","preventDefault","contentTrimmed","trim","ref","value","required","placeholder","onChange","target","onClick","current","focus","List","styled","ul","Item","li","hidden","css","Content","span","done","Button","button","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","id","content","Buttons","toggleHideDone","setAllDone","deleteAllTasks","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.322d8718.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\nimport \"./style.css\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const contentTrimmed = newTaskContent.trim();\n        if (!contentTrimmed) {\n            return;\n        }\n        addNewTask(contentTrimmed);\n        setNewTaskContent(\"\");\n    }\n    return (\n        <form\n            className=\"form\"\n            onSubmit={onFormSubmit}\n        >\n            <input\n                ref={inputRef}\n                value={newTaskContent}\n                className=\"form__input\"\n                required\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <button\n                className=\"form__button\"\n                onClick={() => inputRef.current.focus()}\n            >\n                Dodaj zadanie\n            </button>\n        </form>\n    )\n};\n\nexport default Form;","import styled, {css} from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n    margin: 0 20px;\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n\n    ${({hidden}) => hidden && css`\n      display: none;\n    `}\n`;\n\n\nexport const Content = styled.span`\n    word-break: break-all;\n\n    ${({done}) => done && css`\n      text-decoration-line: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    width: 30px;\n    height: 30px;\n    color: white;\n    border: none;\n    font-family: \"Material Icons Outlined\";\n    font-size: 16px;\n    padding: 0;\n\n      ${({toggleDone}) => toggleDone && css`\n        background-color: green;\n      `}\n\n        &:hover  {\n          background-color: hsl(120, 100%, 35%);\n          transition: 1s;\n        }\n\n        &:active {\n          background-color: hsl(120, 100%, 45%);\n          transition: 1s;\n        }\n\n      ${({remove}) => remove && css`\n        background-color: crimson;\n\n        &:hover {\n          background-color: hsl(348, 83%, 57%);\n        }\n\n        &:active {\n          background-color: hsl(348, 83%, 67%);\n          transition: 1s;\n        }\n      `}\n`;","import { List, Item, Content, Button } from \"./styled\"\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n    <List>\n        {tasks.map(task => (\n            <Item\n                key={task.id}\n                hidden={task.done && hideDone}\n            >\n                <Button\n                    toggleDone\n                    onClick={() => toggleTaskDone(task.id)}\n                >\n                    {task.done ? \"done\" : \"\"}\n                </Button>\n                <Content\n                    done={task.done}>\n                    {task.content}\n                </Content>\n                <Button\n                    remove\n                    onClick={() => removeTask(task.id)}\n                >\n                    delete\n                </Button>\n            </Item>\n        ))}\n    </List>\n);\n\nexport default Tasks;","import React from \"react\";\nimport \"./style.css\";\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone, deleteAllTasks }) => (\n\n    <div className=\"buttons\" > {\n        tasks.length > 0 && (\n            <>\n                <button\n                    onClick={toggleHideDone}\n                    className=\"buttons__button\"\n                    disabled={tasks.every(({ done }) => !done)} >\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n                </button>\n\n                <button\n                    className=\"buttons__button\"\n                    onClick={setAllDone}\n                    disabled={tasks.every(({ done }) => done)} >\n                    {hideDone ? \"\" : \"Zaznacz wszystkie\"} \n                </button>\n\n                <button\n                    onClick={deleteAllTasks}\n                    className=\"buttons__button\">\n                    Usuń wszystkie\n                </button>\n            </>\n        )}\n    </div>\n\n);\n\nexport default Buttons;","import \"./style.css\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <section className=\"section\">\n        <header className=\"section__header\">\n            <h2 className=\"section__title\">{title}</h2>\n            {extraHeaderContent}\n        </header>\n\n        <div className=\"section__body\">\n            {body}\n        </div>\n    </section>\n);\n\nexport default Section;","import \"./style.css\";\n\nconst Header = ({ title }) => (\n    <header>\n        <h1 className=\"header\">{title}</h1>\n    </header>\n);\n\nexport default Header;","import \"./style.css\";\n\nconst Container = ({ children }) => (\n    <main className=\"container\">\n        {children}\n    </main>\n);\n\nexport default Container;","import { useEffect, useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  const deleteAllTasks = () => {\n    setTasks([]);\n  };\n \n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form\n          addNewTask={addNewTask}\n        />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n            deleteAllTasks={deleteAllTasks}\n          />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}