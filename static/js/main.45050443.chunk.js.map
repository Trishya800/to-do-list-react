{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/styled.js","Header/index.js","Container/styled.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["FormContent","styled","form","FormInput","input","FormButton","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","contentTrimmed","trim","ref","value","required","placeholder","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","done","Button","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","id","content","OptionalButtons","div","disabled","Buttons","toggleHideDone","setAllDone","deleteAllTasks","length","every","SectionContent","section","SectionHeader","header","SectionBody","SectionTitle","h2","Section","title","body","extraHeaderContent","Title","Header","className","Main","main","Container","children","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45050443.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const FormContent = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 10px;\n    margin: 20px;\n\n    @media (max-width: 610px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const FormInput = styled.input`\n    padding: 10px;\n    border: 1px solid #ddd;\n    color: hsl(0, 0%, 60%);\n    outline-color: rgb(65, 65, 65);\n    outline-width: thin;\n`;\n\nexport const FormButton = styled.button`\n    background: hsl(180, 100%, 25%);\n    color: white;\n    padding: 10px;\n    border: none;\n\n    &:hover {\n        background: hsl(180, 100%, 30%);\n        transform: scale(1.05);\n        transition: 0.5s;\n    }\n\n    &:active {\n        background: hsl(180, 100%, 50%);\n        transform: scale(1.01);\n        transition: 0.5s;\n    }\n`;","import { useState, useRef } from \"react\";\nimport { FormContent, FormInput, FormButton } from \"./styled\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const contentTrimmed = newTaskContent.trim();\n        if (!contentTrimmed) {\n            return;\n        }\n        addNewTask(contentTrimmed);\n        setNewTaskContent(\"\");\n    }\n    return (\n        <FormContent\n            onSubmit={onFormSubmit}\n        >\n            <FormInput\n                ref={inputRef}\n                value={newTaskContent}\n                required\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <FormButton\n                onClick={() => inputRef.current.focus()}\n            >\n                Dodaj zadanie\n            </FormButton>\n        </FormContent>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n    margin: 0 20px;\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n\n    ${({ hidden }) => hidden && css`\n      display: none;\n    `}\n`;\n\n\nexport const Content = styled.span`\n    word-break: break-all;\n\n    ${({ done }) => done && css`\n      text-decoration-line: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    width: 30px;\n    height: 30px;\n    color: white;\n    border: none;\n    font-family: \"Material Icons Outlined\";\n    font-size: 16px;\n    padding: 0;\n\n      ${({ toggleDone }) => toggleDone && css`\n          background-color: green;\n      `}\n\n        &:hover  {\n          background-color: hsl(120, 100%, 35%);\n          transition: 1s;\n        }\n\n        &:active {\n          background-color: hsl(120, 100%, 45%);\n          transition: 1s;\n        }\n\n      ${({ remove }) => remove && css`\n        background-color: crimson;\n\n        &:hover {\n          background-color: hsl(348, 83%, 57%);\n        }\n\n        &:active {\n          background-color: hsl(348, 83%, 67%);\n          transition: 1s;\n        }\n      `}\n`;","import { List, Item, Content, Button } from \"./styled\"\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n    <List>\n        {tasks.map(task => (\n            <Item\n                key={task.id}\n                hidden={task.done && hideDone}\n            >\n                <Button\n                    toggleDone\n                    onClick={() => toggleTaskDone(task.id)}\n                >\n                    {task.done ? \"done\" : \"\"}\n                </Button>\n                <Content\n                    done={task.done}>\n                    {task.content}\n                </Content>\n                <Button\n                    remove\n                    onClick={() => removeTask(task.id)}\n                >\n                    delete\n                </Button>\n            </Item>\n        ))}\n    </List>\n);\n\nexport default Tasks;","import styled, { css } from \"styled-components\";\n\nexport const OptionalButtons = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-right: 20px;\n\n    @media (max-width: 790px){\n        justify-content: center;\n        margin-right: 0;\n    }\n\n    @media (max-width: 610px) {\n        flex-direction: column;\n    }\n`;\n\nexport const Button = styled.button`\n    color: teal;\n    border: none;\n    transition: color 0.5s;\n    background-color: transparent;\n\n    @media (max-width: 790px){\n        margin: 10px;\n    }\n\n    &:hover {\n        color: hsl(180, 100%, 35%);\n    }\n\n    ${({ disabled }) => disabled && css`\n        color: rgb(203, 203, 203);\n    `}\n`;","import {OptionalButtons, Button} from \"./styled\"\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone, deleteAllTasks }) => (\n\n    <OptionalButtons > {\n        tasks.length > 0 && (\n            <>\n                <Button\n                    onClick={toggleHideDone}\n                    disabled={tasks.every(({ done }) => !done)} >\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n                </Button>\n\n                <Button\n                    onClick={setAllDone}\n                    disabled={tasks.every(({ done }) => done)} >\n                    {hideDone ? \"\" : \"Zaznacz wszystkie\"}\n                </Button>\n\n                <Button\n                    onClick={deleteAllTasks}\n                >\n                    Usuń wszystkie\n                </Button>\n            </>\n        )}\n    </OptionalButtons>\n\n);\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const SectionContent = styled.section`\n    display: grid;\n    margin: 10px;\n     box-shadow: 0 0 5px hsl(0, 0%, 86%);\n    background-color: white;\n`;\n\nexport const SectionHeader = styled.header`\ndisplay: grid;\n    grid-template-columns: auto auto;\n    border-bottom: 3px solid rgb(241 240 242);\n\n    @media (max-width: 790px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const SectionBody = styled.div`\n    background-color: white;\n`;\n\nexport const SectionTitle = styled.h2`\n    margin-left: 20px;\n\n    @media (max-width: 790px) {\n        text-align: center;\n        margin-left: 0;\n    }\n`;","import { SectionContent, SectionHeader, SectionBody, SectionTitle } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <SectionContent>\n        <SectionHeader>\n            <SectionTitle>{title}</SectionTitle>\n            {extraHeaderContent}\n        </SectionHeader>\n\n        <SectionBody>\n            {body}\n        </SectionBody>\n    </SectionContent>\n);\n\nexport default Section;","import styled from \"styled-components\";\n\nexport const Title = styled.header`\n    margin: 10px;\n    padding-top: 20px;\n\n    @media (max-width: 790px) {\n        text-align: center;\n    }\n`;","import { Title } from \"./styled.js\";\n\nconst Header = ({ title }) => (\n    <Title>\n        <h1 className=\"header\">{title}</h1>\n    </Title>\n);\n\nexport default Header;","import styled from  \"styled-components\";\n\nexport const Main = styled.main`\n  max-width: 900px;\n  margin: 0 auto;\n`;\n\n","import { Main } from \"./styled.js\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","import { useEffect, useState} from \"react\";\n// import {useTasks} from \"./useTask\"\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  // const {\n  //   tasks,\n  //   removeTask,\n  //   toggleTaskDone,\n  //   setAllDone,\n  //   addNewTask,\n  //   deleteAllTasks,\n  // } = useTasks();\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  const deleteAllTasks = () => {\n    setTasks([]);\n  };\n \n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form\n          addNewTask={addNewTask}\n        />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n            deleteAllTasks={deleteAllTasks}\n          />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}