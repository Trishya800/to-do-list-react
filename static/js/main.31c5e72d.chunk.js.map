{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","Theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","concerte","FormWrapper","styled","form","breakpoints","small","FormInput","input","alto","teal","FormButton","button","white","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","setAllNotDone","deleteAllTasks","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","contentTrimmed","trim","content","nanoid","current","focus","ref","value","required","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","Button","toggleDone","japaneseLaurel","remove","crimson","TaskList","useSelector","map","task","onClick","Wrapper","div","xsmall","Buttons","length","disabled","every","section","Header","header","SectionBody","Title","h2","Section","title","body","extraHeaderContent","h1","Main","main","Container","children","Tasks","TasksList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","medium","large","document","getElementById"],"mappings":"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","file":"static/js/main.31c5e72d.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n      box-sizing: border-box;\n    }\n\n    *,\n    ::after,\n    ::before {\n      box-sizing: inherit;\n    }\n\n    body {\n      background-color: ${({ theme }) => theme.colors.concerte};\n      font-family: \"Montserrat\", sans-serif;\n      font-size: smaller;\n    }\n`;\n","import styled from \"styled-components\";\n\nexport const FormWrapper = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 10px;\n    margin: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const FormInput = styled.input`\n    padding: 10px;\n    border: 1px solid ${({ theme }) => theme.colors.alto};\n    color: ${({ theme }) => theme.colors.teal};\n    outline-color: ${({ theme }) => theme.colors.alto};\n    outline-width: thin;\n`;\n\nexport const FormButton = styled.button`\n    background: ${({ theme }) => theme.colors.teal};\n    color: ${({ theme }) => theme.colors.white};\n    padding: 10px;\n    border: none;\n    transition: 0.5s filter;\n\n    &:hover {\n        filter: brightness(110%);\n        transform: scale(1.01);\n    }\n\n    &:active {\n        filter: brightness(120%);\n        transform: scale(1.01);\n    }\n`;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        tasks: [],\n        hideDone: false,\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload }) => {\n            tasks.push(payload);\n        },\n\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n\n        toggleTaskDone: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n            tasks[index].done = !tasks[index].done;\n        },\n\n        removeTask: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n            tasks.splice(index, 1);\n        },\n\n        setAllDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n\n        setAllNotDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = false;\n            }\n        },\n\n        deleteAllTasks: ({ tasks }, { payload }) => {\n            tasks.splice(payload);\n        },\n\n    },\n},\n);\n\nexport const {\n    addTask,\n    toggleHideDone,\n    toggleTaskDone,\n    removeTask,\n    setAllDone,\n    setAllNotDone,\n    deleteAllTasks,\n} = tasksSlice.actions;\nexport const selectTasks = state => state.tasks;\nexport default tasksSlice.reducer;\n","import { nanoid } from \"@reduxjs/toolkit\";\nimport { useState, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { FormWrapper, FormInput, FormButton } from \"./styled\";\nimport { addTask } from \"../tasksSlice\";\n\nconst Form = () => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const contentTrimmed = newTaskContent.trim();\n        if (!contentTrimmed) {\n            return;\n        }\n\n        dispatch(addTask({\n            content: contentTrimmed,\n            done: false,\n            id: nanoid(),\n        }));\n\n        setNewTaskContent(\"\")\n        inputRef.current.focus();\n    }\n    return (\n        <FormWrapper\n            onSubmit={onFormSubmit}\n        >\n            <FormInput\n                ref={inputRef}\n                value={newTaskContent}\n                required\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <FormButton>\n                Dodaj zadanie\n            </FormButton>\n        </FormWrapper>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0 0 20px;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n    margin: 0 20px;\n    padding: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.alto};\n\n    ${({ hidden }) => hidden && css`\n      display: none;\n    `}\n`;\n\nexport const Content = styled.span`\n    word-break: break-all;\n\n    ${({ done }) => done && css`\n      text-decoration-line: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    width: 30px;\n    height: 30px;\n    color: ${({ theme }) => theme.colors.white};\n    border: none;\n    font-family: \"Material Icons Outlined\";\n    font-size: 16px;\n    padding: 0;\n    transition: 0.5s filter;\n\n      ${({ toggleDone }) => toggleDone && css`\n          background-color: ${({ theme }) => theme.colors.japaneseLaurel};\n      `}\n\n        &:hover  {\n          filter: brightness(110%);\n        }\n\n        &:active {\n          filter: brightness(130%);\n        }\n\n      ${({ remove }) => remove && css`\n        background-color: ${({ theme }) => theme.colors.crimson};\n\n        &:hover {\n          filter: brightness(110%);\n        }\n\n        &:active {\n          filter: brightness(130%);\n        }\n      `}\n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport { List, Item, Content, Button } from \"./styled\";\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\n\nconst TaskList = () => {\n    const { tasks, hideDone } = useSelector(selectTasks);\n    const dispatch = useDispatch();\n\n    return (\n        <List>\n            {tasks.map(task => (\n                <Item\n                    key={task.id}\n                    hidden={task.done && hideDone}\n                >\n                    <Button\n                        toggleDone\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\n                    >\n                        {task.done ? \"done\" : \"\"}\n                    </Button>\n                    <Content done={task.done}>\n                        {task.content}\n                    </Content>\n                    <Button\n                        remove\n                        onClick={() => dispatch(removeTask(task.id))}\n                    >\n                        delete\n                    </Button>\n                </Item>\n            ))}\n        </List>\n    );\n};\n\nexport default TaskList;","import styled from \"styled-components\"\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-right: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        justify-content: center;\n        margin-right: 0px;\n    }\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.xsmall}px) {\n        flex-direction: column;\n    }\n`;\n\nexport const Button = styled.button`\n    color: ${({ theme }) => theme.colors.teal};\n    border: none;\n    transition: color 0.5s;\n    background-color: transparent;\n    cursor: pointer;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        margin: 5px;\n    }\n\n    &:hover {\n       filter: brightness(120%);\n    }\n\n    &:disabled {\n        color: ${({ theme }) => theme.colors.alto};\n        cursor: none;\n        filter: brightness(100%);\n    }\n`;","import { Wrapper, Button } from \"./styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectTasks, toggleHideDone, setAllDone, setAllNotDone, deleteAllTasks } from \"../tasksSlice\";\n\nconst Buttons = () => {\n    const { tasks, hideDone, done } = useSelector(selectTasks);\n    const dispatch = useDispatch();\n    return (\n        <Wrapper > {\n            tasks.length > 0 && (\n                <>\n                    <Button\n                        onClick={() => dispatch(toggleHideDone())}\n                        disabled={tasks.every(({ done }) => !done)}\n                    >\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n                    </Button>\n\n                    <Button\n                        onClick={() => dispatch(setAllDone())}\n                        disabled={tasks.every(({ done }) => done)}\n                    >\n                        {done ? \"\" : \"Zaznacz wszystkie\"}\n                    </Button>\n\n                    <Button\n                        onClick={() => dispatch(setAllNotDone())}\n                        disabled={tasks.every(({ done }) => !done)}\n                    >\n                        {done ? \"\" : \"Odznacz wszystkie\"}\n                    </Button>\n\n                    <Button\n                        onClick={() => dispatch(deleteAllTasks())}\n                    >\n                        Usuń wszystkie\n                    </Button>\n                </>\n            )}\n        </Wrapper>\n    )\n};\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    display: grid;\n    margin: 10px;\n    box-shadow: 0 0 5px hsl(0, 0%, 86%);\n    background-color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const Header = styled.header`\n    display: grid;\n    grid-template-columns: auto auto;\n    border-bottom: 3px solid rgb(241 240 242);\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const SectionBody = styled.div`\n    background-color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const Title = styled.h2`\n    margin-left: 20px;\n\n    @media (max-width: 768px) {\n        text-align: center;\n        margin-left: 0;\n    }\n`;","import { Wrapper, Header, SectionBody, Title } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <Wrapper>\n        <Header>\n            <Title>{title}</Title>\n            {extraHeaderContent}\n        </Header>\n\n        <SectionBody>\n            {body}\n        </SectionBody>\n    </Wrapper>\n);\n\nexport default Section;","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n    margin: 10px;\n    padding-top: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        text-align: center;\n    }\n`;","import { Title } from \"./styled.js\";\n\nconst Header = ({ title }) => (\n    <Title>{title}</Title>\n);\n\nexport default Header;","import styled from  \"styled-components\";\n\nexport const Main = styled.main`\n  max-width: 900px;\n  margin: 0 auto;\n`;\n\n","import { Main } from \"./styled.js\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","import Form from \"../../features/tasks/Form\";\nimport TasksList from \"../../features/tasks/TasksList\";\nimport Buttons from \"../../features/tasks/Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TasksList />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n};\n\nexport default Tasks;","import Tasks from \"./features/tasks/Tasks\";\n\nconst App = () => <Tasks />;\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport tasksReducer from \"./features/tasks/tasksSlice\";\n\nexport default configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from './GlobalStyle.js';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./Theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    colors: {\n        alto: \"#CFCFCF\",\n        teal: \"#008080\",\n        japaneseLaurel: \"#097B09\",\n        crimson: \"#DC143C\",\n        concerte: \"#F2F2F2\",\n        white: \"#FFFFFF\",\n    },\n    breakpoints: {\n        xsmall: 576,\n        small: 768,\n        medium: 992,\n        large: 1200,\n    }\n};\n\n"],"sourceRoot":""}