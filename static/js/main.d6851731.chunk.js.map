{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/tasksLocalStorage.js","features/tasks/TasksPage/tasksSlice.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/DownloadButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/tasks/authorPage/index.js","common/NavigationMenu/styled.js","common/NavigationMenu/index.js","App.js","reportWebVitals.js","features/tasks/TasksPage/getExampleTasks.js","features/tasks/TasksPage/taskSaga.js","rootSaga.js","store.js","index.js","Theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","concerte","FormWrapper","styled","form","breakpoints","small","FormButton","button","teal","white","Input","input","alto","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","setAllNotDone","deleteAllTasks","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","lenght","selectIsEveryTaskDone","every","selectIsEveryTaskNotDone","selectLoading","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","contentTrimmed","trim","content","nanoid","current","focus","ref","value","required","placeholder","onChange","target","List","ul","Item","li","hidden","css","StyledLink","Link","mineShaft","Content","span","Button","toggleDone","japaneseLaurel","remove","crimson","TaskList","location","useLocation","query","URLSearchParams","search","get","searchQueryParamName","useSelector","filter","includes","selectTasksByQuery","map","onClick","to","Wrapper","div","xsmall","Buttons","areTasksEmpty","isEveryTaskDone","isEveryTaskNotDone","disabled","section","Header","header","SectionBody","Title","h2","Section","title","body","extraHeaderContent","h1","Main","main","Container","children","Search","param","useQueryParameter","replaceQueryParameter","history","useHistory","key","searchParams","delete","set","pathname","toString","useReplaceQueryParameter","undefined","DownloadButton","TasksPage","TaskPage","useParams","find","getTaskById","AuthorPage","activeClassName","StyledNavLink","NavLink","attrs","NavigationMenu","App","basename","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","medium","large","document","getElementById"],"mappings":"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","file":"static/js/main.d6851731.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n      box-sizing: border-box;\n    }\n\n    *,\n    ::after,\n    ::before {\n      box-sizing: inherit;\n    }\n\n    body {\n      background-color: ${({ theme }) => theme.colors.concerte};\n      font-family: \"Montserrat\", sans-serif;\n      font-size: smaller;\n    }\n`;\n","import styled from \"styled-components\";\n\nexport const FormWrapper = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 10px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const FormButton = styled.button`\n    background: ${({ theme }) => theme.colors.teal};\n    color: ${({ theme }) => theme.colors.white};\n    padding: 10px;\n    border: none;\n    transition: 0.5s filter;\n\n    &:hover {\n        filter: brightness(110%);\n        transform: scale(1.01);\n    }\n\n    &:active {\n        filter: brightness(120%);\n        transform: scale(1.01);\n    }\n`;","import styled from \"styled-components\";\n\nconst Input = styled.input`\n    padding: 10px;\n    border: 1px solid ${({ theme }) => theme.colors.alto};\n    color: ${({ theme }) => theme.colors.teal};\n    outline-color: ${({ theme }) => theme.colors.alto};\n    outline-width: thin;\n`;\n\nexport default Input;","const localStorageKey = \"tasks\"\n\nexport const saveTasksInLocalStorage = tasks =>\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n\nexport const getTasksFromLocalStorage = () =>\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\n\nconst tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        tasks: getTasksFromLocalStorage(),\n        hideDone: false,\n        loading: false,\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload: task }) => {\n            tasks.push(task);\n        },\n\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\n            const index = tasks.findIndex(({ id }) => id === taskId);\n            tasks[index].done = !tasks[index].done;\n        },\n\n        removeTask: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n            tasks.splice(index, 1);\n        },\n\n        setAllDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n\n        setAllNotDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = false;\n            }\n        },\n\n        deleteAllTasks: ({ tasks }, { payload }) => {\n            tasks.splice(payload);\n        },\n        \n        fetchExampleTasks: state => {\n            state.loading = true;\n         },\n\n        setTasks: (state, { payload: tasks }) => {\n            state.tasks = tasks;\n            state.loading = false;\n        },\n    },\n},\n);\n\nexport const {\n    addTask,\n    toggleHideDone,\n    toggleTaskDone,\n    removeTask,\n    setAllDone,\n    setAllNotDone,\n    deleteAllTasks,\n    fetchExampleTasks,\n    setTasks,\n} = tasksSlice.actions;\n\nconst selectTasksState = state => state.tasks;\n\nexport const selectTasks = state => selectTasksState(state).tasks;\nexport const selectHideDone = state => selectTasksState(state).hideDone;\nexport const selectAreTasksEmpty = state => selectTasks(state).lenght === 0;\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\nexport const selectIsEveryTaskNotDone = state => selectTasks(state).every(({ done }) => !done);\n\nexport const getTaskById = (state, taskId) =>\n    selectTasks(state).find(({ id }) => id === taskId);\n\nexport const selectTasksByQuery = (state, query) => {\n    const tasks = selectTasks(state);\n\n    if (!query || query.trim() === \"\") {\n        return tasks;\n    }\n    return (\n        tasks.filter(({ content }) => content.includes(query.trim())));\n};\n\nexport const selectLoading = state => state.tasks.loading;\n\nexport default tasksSlice.reducer;\n","import { nanoid } from \"@reduxjs/toolkit\";\nimport { useState, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { FormWrapper, FormButton } from \"./styled\";\nimport Input from \"../../Input\";\nimport { addTask } from \"../tasksSlice\";\n\nconst Form = () => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const contentTrimmed = newTaskContent.trim();\n        if (!contentTrimmed) {\n            return;\n        }\n\n        dispatch(addTask({\n            content: contentTrimmed,\n            done: false,\n            id: nanoid(),\n        }));\n\n        setNewTaskContent(\"\")\n        inputRef.current.focus();\n    }\n    return (\n        <FormWrapper\n            onSubmit={onFormSubmit}\n        >\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                required\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <FormButton>\n                Dodaj zadanie\n            </FormButton>\n        </FormWrapper>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const List = styled.ul`\n    list-style: none;\n    padding-left: 0;\n    margin: 0px;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 20px;\n    align-items: center;\n    padding: 10px 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.alto};\n\n    ${({ hidden }) => hidden && css`\n      display: none;\n    `}\n`;\n\nexport const StyledLink = styled(Link)`\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.mineShaft};\n     transition: color 0.5s;\n\n    &:hover  {\n        color: ${({ theme }) => theme.colors.teal};\n      }\n\n    &:active {\n        filter: brightness(130%);\n      }\n`;\n\nexport const Content = styled.span`\n    word-break: break-all;\n\n    ${({ done }) => done && css`\n        text-decoration-line: line-through;\n    `}\n`;\n\n\nexport const Button = styled.button`\n    width: 30px;\n    height: 30px;\n    color: ${({ theme }) => theme.colors.white};\n    border: none;\n    font-family: \"Material Icons Outlined\";\n    font-size: 16px;\n    padding: 0;\n    transition: 0.5s filter;\n\n      ${({ toggleDone }) => toggleDone && css`\n          background-color: ${({ theme }) => theme.colors.japaneseLaurel};\n      `}\n\n        &:hover  {\n          filter: brightness(110%);\n        }\n\n        &:active {\n          filter: brightness(130%);\n        }\n\n      ${({ remove }) => remove && css`\n        background-color: ${({ theme }) => theme.colors.crimson};\n\n        &:hover {\n          filter: brightness(110%);\n        }\n\n        &:active {\n          filter: brightness(130%);\n        }\n      `}\n`;","/* eslint-disable import/no-anonymous-default-export */\nexport default \"szukaj\";","import { useSelector, useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport  {StyledLink } from \"./styled\";\nimport { List, Item, Content, Button } from \"./styled\";\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../tasksSlice\";\nimport searchQueryParamName from \"../searchQueryParamName\";\n\nconst TaskList = () => {\n    const location = useLocation();\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\n\n\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\n    const hideDone = useSelector(selectHideDone);\n\n    const dispatch = useDispatch();\n\n    return (\n        <List>\n            {tasks.map(task => (\n                <Item\n                    key={task.id}\n                    hidden={task.done && hideDone}\n                >\n                    <Button\n                        toggleDone\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\n                    >\n                        {task.done ? \"done\" : \"\"}\n                    </Button>\n                    <Content done={task.done}>\n                        <StyledLink to={`/zadania/${task.id}`}>{task.content}</StyledLink>\n                    </Content>\n                    <Button\n                        remove\n                        onClick={() => dispatch(removeTask(task.id))}\n                    >\n                        delete\n                    </Button>\n                </Item>\n            ))}\n        </List>\n    );\n};\n\nexport default TaskList;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-right: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        justify-content: center;\n        margin-right: 0px;\n    }\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.xsmall}px) {\n        flex-direction: column;\n    }\n`;\n\nexport const Button = styled.button`\n    color: ${({ theme }) => theme.colors.teal};\n    border: none;\n    transition: color 0.5s;\n    background-color: transparent;\n    cursor: pointer;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        margin: 5px;\n    }\n\n    &:hover {\n       filter: brightness(120%);\n    }\n\n    &:disabled {\n        color: ${({ theme }) => theme.colors.alto};\n        cursor: none;\n        filter: brightness(100%);\n    }\n`;","import { Wrapper } from \"../../Button\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {Button} from \"../../Button\";\n\nimport {\n    selectTasks,\n    toggleHideDone,\n    setAllDone,\n    setAllNotDone,\n    deleteAllTasks,\n    selectAreTasksEmpty,\n    selectIsEveryTaskDone,\n    selectIsEveryTaskNotDone\n} from \"../../TasksPage/tasksSlice\";\n\nconst Buttons = () => {\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\n    const isEveryTaskNotDone = useSelector(selectIsEveryTaskNotDone)\n    const { hideDone } = useSelector(selectTasks);\n    const dispatch = useDispatch();\n    return (\n        <Wrapper >\n\n            {!areTasksEmpty && (\n                <>\n                    <Button\n                        onClick={() => dispatch(toggleHideDone())}\n                    >\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n                    </Button>\n\n                    <Button\n                        onClick={() => dispatch(setAllDone())}\n                        disabled={isEveryTaskDone}\n                    >\n                        Zaznacz wszystkie\n                    </Button>\n\n                    <Button\n                        onClick={() => dispatch(setAllNotDone())}\n                        disabled={isEveryTaskNotDone}\n                    >\n                        Odznacz wszystkie\n                    </Button>\n\n                    <Button\n                        onClick={() => dispatch(deleteAllTasks())}\n                    >\n                        Usuń wszystkie\n                    </Button>\n                </>\n            )}\n        </Wrapper>\n    )\n};\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    display: grid;\n    margin: 10px;\n    box-shadow: 0 0 5px hsl(0, 0%, 86%);\n    background-color: ${({ theme }) => theme.colors.white};\n    line-height: 1.5;\n`;\n\nexport const Header = styled.header`\n    display: grid;\n    grid-template-columns: auto auto;\n    border-bottom: 3px solid rgb(241 240 242);\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const SectionBody = styled.div`\n    background-color: ${({ theme }) => theme.colors.white};\n    padding: 20px;\n    text-align: justify;\n`;\n\nexport const Title = styled.h2`\n    margin-left: 20px;\n\n    @media (max-width: 768px) {\n        text-align: center;\n        margin-left: 0;\n    }\n`;","import { Wrapper, Header, SectionBody, Title } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <Wrapper>\n        <Header>\n            <Title>{title}</Title>\n            {extraHeaderContent}\n        </Header>\n\n        <SectionBody>\n            {body}\n        </SectionBody>\n    </Wrapper>\n);\n\nexport default Section;","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n    margin: 10px;\n    padding-top: 20px;\n\n    @media (max-width: ${({ theme }) => theme.breakpoints.small}px) {\n        text-align: center;\n    }\n`;","import { Title } from \"./styled.js\";\n\nconst Header = ({ title }) => (\n    <Title>{title}</Title>\n);\n\nexport default Header;","import styled from  \"styled-components\";\n\nexport const Main = styled.main`\n  max-width: 900px;\n  margin: 0 auto;\n`;\n\n","import { Main } from \"./styled.js\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\ndisplay:grid;\ngrid-template-columns: 1fr;\n`;","// import { useLocation, useHistory } from \"react-router\";\nimport Input from \"../../Input\";\nimport { Wrapper } from \"./styled\";\nimport {useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\"\nimport searchQueryParamName from \"../searchQueryParamName\";\n\nexport const Search = () => {\n    const query = useQueryParameter(searchQueryParamName);\n    const replaceQueryParameter = useReplaceQueryParameter();\n\n    const onInputChange = ({target}) => {\n        replaceQueryParameter({\n            key: searchQueryParamName,\n            value: target.value.trim() !== \"\" ? target.value : undefined,\n        })\n    };\n\n    return (\n        <Wrapper>\n            <Input\n            placeholder=\"Filtruj zadania\"\n            value={query || \"\"}\n            onChange={onInputChange}\n        />\n        </Wrapper>\n    );\n};","import { useLocation, useHistory } from \"react-router\";\n\nexport const useQueryParameter = ({ param }) => {\n    const location = useLocation();\n    return (\n        new URLSearchParams(location.search)).get(param);\n};\n\nexport const useReplaceQueryParameter = () => {\n    const location = useLocation();\n    const history = useHistory();\n\n    return ({ key, value }) => {\n        const searchParams = new URLSearchParams(location.search);\n        if (!value === \"\") {\n            searchParams.delete(key);\n        } else {\n            searchParams.set(key, value);\n        }\n        history.push(`${location.pathname}?${searchParams.toString()}`);\n    };\n};\n\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { fetchExampleTasks, selectLoading } from \"../../TasksPage/tasksSlice\";\nimport { Button } from \"../../Button\";\n\n\nexport const DownloadButton = () => {\n    const loading = useSelector(selectLoading);\n    const dispatch = useDispatch();\n    return (\n        <Button\n            onClick={() => dispatch(fetchExampleTasks())}\n            disabled={loading}\n        >\n            {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\n        </Button>\n    )\n};","import Form from \"../TasksPage/Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"../TasksPage/Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport { Search } from \"./Search\";\nimport { DownloadButton } from \"./DownloadButton\";\nimport { Wrapper } from \"../Button\";\n\nexport const TasksPage = () => {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent={\n          <Wrapper>\n            <DownloadButton />\n          </Wrapper>\n        }\n\n      />\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n};","import { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport { getTaskById } from \"../TasksPage/tasksSlice\";\n\nexport const TaskPage = () => {\n  const { id } = useParams();\n  const task = useSelector(state => getTaskById(state, id));\n\n  return (\n    <Container>\n        <Header title=\"Szczegóły zadania\" />\n        <Section\n        title={task ? task.content : \"Nie znaleziono zadania\"}\n        body={\n        <>\n       <strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\n        </>\n        }\n      />\n    </Container>\n  );\n};","import Container from \"../../../common/Container\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\n\nexport const AuthorPage = () => {\n    return (\n        <Container>\n            <Header title=\"O autorze\" />\n            <Section\n                title=\"Patrycja Leśniak\"\n                body={\n                    <>\n                        Witaj świecie. To ja - <b>Patrycja</b>. Niepoprawna optymistka, marzycielka, miłośniczka kotów, psów. Zapalona czytelniczka literatury wszelakiej z upodobaniem do ksiąkowych cegieł. Wieczna poszukiwaczka <b>swojego</b> miejsca na ziemi.<br />\n                        A jako, że ciągle nie wiem, <b>kim chcę zostać gdy dorosnę</b> pomyślałam, że chcę spróbować w programowanie. No więc jestemi postaram się wyciągnąć z tego kursu ile się da. Dla przyjemności uczę się hiszpańskiego, gram na pianinie, gotuję, strzelam fotki i przeprojektowuję głównie w głowie i na papierze ; mój dom aby pomieścił wszystkie książki jakie chcę przeczytać.\n                    </>\n                }\n            />\n        </Container>\n    )\n}","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const List = styled.ul`\n    background-color: ${({ theme }) => theme.colors.teal};\n    margin: auto;\n    padding: 20px;\n    list-style-type: none;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nexport const Item = styled.li`\n  margin-right: 10px;\n  color: white;\n`;\n\nconst activeClassName = \"active\";\n\nexport const StyledNavLink = styled(NavLink).attrs(() => ({ activeClassName }))`\n    color: white;\n    text-decoration: none;\n\n&.${activeClassName} {\n    font-weight: 900;\n}\n`;","import { List, StyledNavLink, Item } from \"./styled\";\n\n\n\nexport const NavigationMenu = () => {\n    return (\n        <>\n        <List>\n            <Item>\n                <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\n            </Item>\n            <Item>\n                <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\n            </Item>\n        </List>\n        </>\n    )\n};\n","\nimport { HashRouter } from \"react-router-dom\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { TasksPage } from \"./features/tasks/TasksPage\";\nimport { TaskPage } from \"./features/tasks/TaskPage\";\nimport { AuthorPage } from \"./features/tasks/authorPage\";\nimport { NavigationMenu } from \"./common/NavigationMenu\"\n\nexport const App = () => {\n    return (\n        <HashRouter basename=\"/to-do-list-react\">\n            <nav>\n                <NavigationMenu />\n                <Switch>\n                    <Route path=\"/zadania/:id\">\n                        <TaskPage />\n                    </Route>\n                    <Route path=\"/zadania\">\n                        <TasksPage />\n                    </Route>\n                    <Route path=\"/autor\">\n                        <AuthorPage />\n                    </Route>\n                    <Route path=\"/\">\n                        <Redirect to=\"/zadania\" />\n                    </Route>\n                </Switch>\n            </nav>\n        </HashRouter>\n    )\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\n    const response = await fetch(\"/to-do-list-react/exampleTasks.json\");\n\n     if(!response.ok) {\n         new Error(response.statusText);\n     }\n     return await response.json();\n};","import { call, put, takeLatest, takeEvery, select, delay } from \"@redux-saga/core/effects\";\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\nimport { getExampleTasks } from \"../TasksPage/getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\"\n\nfunction* fetchExampleTasksHandler() {\n    try {\n        yield delay(1000);\n        const exampleTasks = yield call(getExampleTasks);\n        yield put(setTasks(exampleTasks))\n    } catch (error) {\n        yield call(alert, \"Coś poszło nie tak!\");\n    }\n}\n\nfunction* saveTasksInLocalStorageHandler() {\n    const tasks = yield select(selectTasks);\n    yield call(saveTasksInLocalStorage, tasks)\n}\n\nexport function* tasksSaga() {\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n}","import { all } from \"redux-saga/effects\";\nimport {tasksSaga} from \"./features/tasks/TasksPage/taskSaga\";\n\nexport default function* rootSaga() {\n    yield all([\n        tasksSaga(),\n    ]);\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport tasksReducer from \"./features/tasks//TasksPage/tasksSlice\";\nimport rootSaga from \"./rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    },\n    middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from './GlobalStyle.js';\nimport {App} from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./Theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    colors: {\n        alto: \"#CFCFCF\",\n        teal: \"#008080\",\n        japaneseLaurel: \"#097B09\",\n        crimson: \"#DC143C\",\n        concerte: \"#F2F2F2\",\n        white: \"#FFFFFF\",\n        mineShaft: \"#1F1F1F\",\n    },\n    breakpoints: {\n        xsmall: 576,\n        small: 768,\n        medium: 992,\n        large: 1200,\n    }\n};\n\n"],"sourceRoot":""}